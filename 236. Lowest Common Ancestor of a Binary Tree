236. Lowest Common Ancestor of a Binary Tree
Medium
Topics
Companies

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

from typing import Optional

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def lowestCommonAncestor(self, root: Optional[TreeNode], p: TreeNode, q: TreeNode) -> Optional[TreeNode]:
        # Base cases:
        # 1) If the current node is None, there's no ancestor here.
        # 2) If the current node matches p or q, we've found one target node.
        if not root or root == p or root == q:
            return root
        
        # Recursively find p and q in the left and right subtrees.
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        
        # If both left and right are non-null, then p and q
        # lie in different subtrees, and the current node is their LCA.
        if left and right:
            return root
        
        # Otherwise, LCA is in whichever subtree is non-null.
        return left if left else right

