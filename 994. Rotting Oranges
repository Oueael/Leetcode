994. Rotting Oranges
Medium
Topics
Companies

You are given an m x n grid where each cell can have one of three values:

    0 representing an empty cell,
    1 representing a fresh orange, or
    2 representing a rotten orange.

Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

============
from collections import deque

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        queue = deque()
        fresh = 0

        # Step 1: Add all rotten oranges to the queue and count fresh ones
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 2:
                    queue.append((r, c, 0))  # row, col, minute
                elif grid[r][c] == 1:
                    fresh += 1

        minutes = 0
        directions = [(-1,0), (1,0), (0,-1), (0,1)]  # up, down, left, right

        # Step 2: BFS to rot adjacent fresh oranges
        while queue:
            r, c, minute = queue.popleft()
            minutes = max(minutes, minute)
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 1:
                    grid[nr][nc] = 2  # rot the orange
                    fresh -= 1
                    queue.append((nr, nc, minute + 1))

        # Step 3: If fresh oranges remain, return -1
        return minutes if fresh == 0 else -1

            
