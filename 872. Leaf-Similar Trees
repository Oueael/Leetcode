872. Leaf-Similar Trees
Easy
Topics
Companies

Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.
===================================
class TreeNode:
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right
class Solution:
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        def dfs(node,leaf_values):
            if node:
                if not node.left and not node.right:
                    leaf_values.append(node.val)
                else:
                    dfs(node.left,leaf_values)
                    dfs(node.right,leaf_values)
        leaves1=[]
        leaves2=[]
        dfs(root1,leaves1)
        dfs(root2,leaves2)

        return leaves1==leaves2

 ======================================================
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
      
        def extract_leafes(stack):
            array = []
            while stack:
                node = stack.pop()
                if node.left is None and node.right is None:
                    array.append(node.val)
                if node.right:
                    stack.append(node.right)
                if node.left:
                    stack.append(node.left) 
            return array

        array1 = extract_leafes([root1])
        print(array1)
        array2 = extract_leafes([root2])
        print(array2)
        return array1 == array2
