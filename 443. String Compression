443. String Compression
Medium
Topics
Companies
Hint

Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of consecutive repeating characters in chars:

    If the group's length is 1, append the character to s.
    Otherwise, append the character followed by the group's length.

The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done modifying the input array, return the new length of the array.

You must write an algorithm that uses only constant extra space.

 

Example 1:

Input: chars = ["a","a","b","b","c","c","c"]
Output: Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]
Explanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".

class Solution:
    def compress(self, chars: List[str]) -> int:
        # Pointer to update the chars array in-place
        write = 0
        
        # Pointer to read through the array
        read = 0

        # Loop through the array
        while read < len(chars):
            # Store the current character
            char = chars[read]
            count = 0  # To count occurrences of the current character
            
            # Count consecutive occurrences of the same character
            while read < len(chars) and chars[read] == char:
                read += 1
                count += 1
            
            # Write the character to the array
            chars[write] = char
            write += 1
            
            # If the count is greater than 1, write the count as well
            if count > 1:
                for digit in str(count):  # Convert count to string to handle multi-digit numbers
                    chars[write] = digit
                    write += 1

        # Return the new length of the array
        return write
